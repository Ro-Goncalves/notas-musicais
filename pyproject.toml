[tool.poetry]
name = "notas-musicais"
version = "0.1.0"
description = ""
authors = ["Rodrigo Gonçalves <ro.go.calves@gmail.com>"]
readme = "README.md"
packages = [{include = "notas_musicais"}]

[tool.poetry.scripts]
notas-musicais = "notas_musicais.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
typer = "^0.9.0"
rich = "^13.7.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.0.1"
pytest-cov = "^4.1.0"
blue = "^0.9.1"
isort = "^5.13.2"
taskipy = "^1.12.2"


[tool.poetry.group.doc.dependencies]
mkdocs-material = "^9.5.9"
mkdocstrings = "^0.24.0"
mkdocstrings-python = "^1.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = "." #Caminho do projeto
addopts = "--doctest-modules" #Lê as docstrings

[tool.isort]
profile = "black" # Ajusta o padrão de identação, deixando igual a do blue
line_length =  79 # Quantidade máxima de caracteres por linha, deixando igual a do blue

[tool.taskipy.tasks]
lint = "blue --check --diff . && isort --check --diff ." # permite usar task lint e executar o comando
docs = "mkdocs serve" # Gera a documentação
pre_test = "task lint" # Antes da task test executa o comando
test = "pytest -s -x --cov=notas_musicais -vv" # Task de teste 
                                               # s para permitir a saída de logs e prints durante a execução dos testes; 
                                               # -x para interromper a execução dos testes assim que um deles falhar; 
                                               # --cov=notas_musicais para gerar a cobertura de código da biblioteca;
                                               # -vv para exibir os resultados de cada teste de forma detalhada.
post_test = "coverage html" # Após a task test executa o comando
